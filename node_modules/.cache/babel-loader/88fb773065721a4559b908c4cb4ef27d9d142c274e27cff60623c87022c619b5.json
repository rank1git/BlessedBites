{"ast":null,"code":"var _jsxFileName = \"/Users/addod/BlessedBites/blessedbites/src/recipes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recipes = ({\n  endpoint,\n  query,\n  type\n}) => {\n  _s();\n  const [data, setData] = useState([]); // State to store fetched data\n  const [loading, setLoading] = useState(true); // State to show loading status\n  const [error, setError] = useState(null); // State to show errors\n\n  // useEffect(() => {\n  //   // Reset state when the endpoint or query changes\n  //   setLoading(true);\n  //   setError(null);\n\n  //   const fetchData = async () => {\n  //     try {\n  //       // Construct the URL based on the passed props\n  //       const url = query \n  //         ? `https://dummyjson.com/${endpoint}/search?q=${query}`\n  //         : `https://dummyjson.com/${endpoint}`;\n\n  //       const res = await fetch(url);\n  //       if (!res.ok) {\n  //         throw new Error(`Network response was not ok: ${res.statusText}`);\n  //       }\n  //       const result = await res.json();\n\n  // \t\t\t// console.log(result.recipes.map(recipe => recipe))\n  //       setData(result.recipes);\n  //     } catch (err) {\n  //       setError(err.message);\n  //     } finally {\n  //       setLoading(false);\n  //     }\n  //   };\n\n  //   fetchData();\n  // }, [endpoint, query]);\n  // console.log(data.map(item => item))\n\n  // return (\n  //   <div>\n  //     {loading && <p>Loading...</p>}\n  //     {error && <p>Error: {error}</p>}\n  //     {/* {data && ( */}\n  //       <div>\n  //         {/* Render the data based on the fetched result */}\n  // \t\t\t\t<ul>\n  //         \t<div>{[data.map(item => item)]}</div>\n  // \t\t\t\t</ul>\n  //       </div>\n  //     {/* )} */}\n  //   </div>\n  // );\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    // Fetch data when component mounts\n    fetch('https://dummyjson.com/recipes?limit=0') // Example API endpoint\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    }).then(data => {\n      console.log(\n      // data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\n      data.recipes);\n      setData(data.recipes);\n      // setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      setError(error); // Set error state if there’s an error\n      setLoading(false);\n    });\n  }, [endpoint, query]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 22\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fetched Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" \", item.id - 1, /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"w-60\",\n          src: item.image,\n          alt: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 3\n  }, this);\n};\n_s(Recipes, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = Recipes;\nexport default Recipes;\n\n// chicken beef vegetarian pasta soup sweet \nvar _c;\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Recipes","endpoint","query","type","_s","data","setData","loading","setLoading","error","setError","fetch","then","res","ok","Error","json","console","log","recipes","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","message","map","item","name","id","className","src","image","alt","_c","$RefreshReg$"],"sources":["/Users/addod/BlessedBites/blessedbites/src/recipes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Recipes = ({ endpoint, query, type }) => {\r\n\tconst [data, setData] = useState([]); // State to store fetched data\r\n\tconst [loading, setLoading] = useState(true); // State to show loading status\r\n\tconst [error, setError] = useState(null); // State to show errors\r\n\r\n\t// useEffect(() => {\r\n  //   // Reset state when the endpoint or query changes\r\n  //   setLoading(true);\r\n  //   setError(null);\r\n\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       // Construct the URL based on the passed props\r\n  //       const url = query \r\n  //         ? `https://dummyjson.com/${endpoint}/search?q=${query}`\r\n  //         : `https://dummyjson.com/${endpoint}`;\r\n\r\n  //       const res = await fetch(url);\r\n  //       if (!res.ok) {\r\n  //         throw new Error(`Network response was not ok: ${res.statusText}`);\r\n  //       }\r\n  //       const result = await res.json();\r\n\t\t\t\t\r\n\t// \t\t\t// console.log(result.recipes.map(recipe => recipe))\r\n  //       setData(result.recipes);\r\n  //     } catch (err) {\r\n  //       setError(err.message);\r\n  //     } finally {\r\n  //       setLoading(false);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchData();\r\n  // }, [endpoint, query]);\r\n\t// console.log(data.map(item => item))\r\n\r\n\t// return (\r\n  //   <div>\r\n  //     {loading && <p>Loading...</p>}\r\n  //     {error && <p>Error: {error}</p>}\r\n  //     {/* {data && ( */}\r\n  //       <div>\r\n  //         {/* Render the data based on the fetched result */}\r\n\t// \t\t\t\t<ul>\r\n  //         \t<div>{[data.map(item => item)]}</div>\r\n\t// \t\t\t\t</ul>\r\n  //       </div>\r\n  //     {/* )} */}\r\n  //   </div>\r\n  // );\r\n\tuseEffect(() => {\r\n\t\tsetLoading(true);\r\n    setError(null);\r\n\t\t// Fetch data when component mounts\r\n\t\tfetch('https://dummyjson.com/recipes?limit=0') // Example API endpoint\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (!res.ok) {\r\n\t\t\t\t\tthrow new Error('Network response was not ok');\r\n\t\t\t\t}\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t// data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\r\n\t\t\t\t\tdata.recipes\r\n\t\t\t\t);\r\n\t\t\t\tsetData(data.recipes)\r\n\t\t\t\t// setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\r\n\t\t\t\tsetLoading(false); // Set loading to false after data is fetched\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetError(error); // Set error state if there’s an error\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t});\r\n\t}, [endpoint, query]);\r\n\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error: {error.message}</p>;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Fetched Data</h1>\r\n\t\t\t<ul>\r\n\t\t\t\t{data.map((item) => (\r\n\t\t\t\t\t<li key={item.id}>\r\n\t\t\t\t\t\t{item.name} {item.id-1}\r\n\t\t\t\t\t\t<img className=\"w-60\" src={item.image} alt={item.name} />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Recipes;\r\n\r\n// chicken beef vegetarian pasta soup sweet "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}