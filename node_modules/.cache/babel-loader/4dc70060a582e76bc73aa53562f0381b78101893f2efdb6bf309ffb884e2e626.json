{"ast":null,"code":"var _jsxFileName = \"/Users/addod/BlessedBites/blessedbites/src/recipes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recipes = ({\n  endpoint,\n  query,\n  type\n}) => {\n  _s();\n  const [data, setData] = useState([]); // State to store fetched data\n  const [loading, setLoading] = useState(true); // State to show loading status\n  const [error, setError] = useState(null); // State to show errors\n\n  useEffect(() => {\n    // Reset state when the endpoint or query changes\n    setLoading(true);\n    setError(null);\n    const fetchData = async () => {\n      try {\n        // Construct the URL based on the passed props\n        const url = query ? `https://dummyjson.com/${endpoint}/search?q=${query}` : `https://dummyjson.com/${endpoint}`;\n        const res = await fetch(url);\n        if (!res.ok) {\n          throw new Error(`Network response was not ok: ${res.statusText}`);\n        }\n        const result = await res.json();\n        console.log(result.recipes.map(recipe => recipe));\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [endpoint, query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.recipes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n  // useEffect(() => {\n  // \tsetLoading(true);\n  //   setError(null);\n  // \t// Fetch data when component mounts\n  // \tfetch('https://dummyjson.com/recipes?limit=0') // Example API endpoint\n  // \t\t.then((res) => {\n  // \t\t\tif (!res.ok) {\n  // \t\t\t\tthrow new Error('Network response was not ok');\n  // \t\t\t}\n  // \t\t\treturn res.json();\n  // \t\t})\n  // \t\t.then((data) => {\n  // \t\t\tconsole.log(\n  // \t\t\t\t// data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\n  // \t\t\t\tdata.recipes\n  // \t\t\t);\n  // \t\t\tsetData(data.recipes)\n  // \t\t\t// setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\n  // \t\t\tsetLoading(false); // Set loading to false after data is fetched\n  // \t\t})\n  // \t\t.catch((error) => {\n  // \t\t\tsetError(error); // Set error state if there’s an error\n  // \t\t\tsetLoading(false);\n  // \t\t});\n  // }, [endpoint, query]);\n\n  // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>Error: {error.message}</p>;\n\n  // return (\n  // \t<div>\n  // \t\t<h1>Fetched Data</h1>\n  // \t\t<ul>\n  // \t\t\t{data.map((item) => (\n  // \t\t\t\t<li key={item.id}>\n  // \t\t\t\t\t{item.name} {item.id-1}\n  // \t\t\t\t\t<img className=\"w-60\" src={item.image} alt={item.name} />\n  // \t\t\t\t</li>\n  // \t\t\t))}\n  // \t\t</ul>\n  // \t</div>\n  // );\n};\n_s(Recipes, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = Recipes;\nexport default Recipes;\n\n// chicken beef vegetarian pasta soup sweet \nvar _c;\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Recipes","endpoint","query","type","_s","data","setData","loading","setLoading","error","setError","fetchData","url","res","fetch","ok","Error","statusText","result","json","console","log","recipes","map","recipe","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/addod/BlessedBites/blessedbites/src/recipes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Recipes = ({ endpoint, query, type }) => {\r\n\tconst [data, setData] = useState([]); // State to store fetched data\r\n\tconst [loading, setLoading] = useState(true); // State to show loading status\r\n\tconst [error, setError] = useState(null); // State to show errors\r\n\r\n\tuseEffect(() => {\r\n    // Reset state when the endpoint or query changes\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        // Construct the URL based on the passed props\r\n        const url = query \r\n          ? `https://dummyjson.com/${endpoint}/search?q=${query}`\r\n          : `https://dummyjson.com/${endpoint}`;\r\n\r\n        const res = await fetch(url);\r\n        if (!res.ok) {\r\n          throw new Error(`Network response was not ok: ${res.statusText}`);\r\n        }\r\n        const result = await res.json();\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(result.recipes.map(recipe => recipe))\r\n        setData(result);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [endpoint, query]);\r\n\r\n\treturn (\r\n    <div>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error: {error}</p>}\r\n      {data && (\r\n        <div>\r\n          {/* Render the data based on the fetched result */}\r\n          <div>{data.recipes}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\t// useEffect(() => {\r\n\t// \tsetLoading(true);\r\n  //   setError(null);\r\n\t// \t// Fetch data when component mounts\r\n\t// \tfetch('https://dummyjson.com/recipes?limit=0') // Example API endpoint\r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tif (!res.ok) {\r\n\t// \t\t\t\tthrow new Error('Network response was not ok');\r\n\t// \t\t\t}\r\n\t// \t\t\treturn res.json();\r\n\t// \t\t})\r\n\t// \t\t.then((data) => {\r\n\t// \t\t\tconsole.log(\r\n\t// \t\t\t\t// data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\r\n\t// \t\t\t\tdata.recipes\r\n\t// \t\t\t);\r\n\t// \t\t\tsetData(data.recipes)\r\n\t// \t\t\t// setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\r\n\t// \t\t\tsetLoading(false); // Set loading to false after data is fetched\r\n\t// \t\t})\r\n\t// \t\t.catch((error) => {\r\n\t// \t\t\tsetError(error); // Set error state if there’s an error\r\n\t// \t\t\tsetLoading(false);\r\n\t// \t\t});\r\n\t// }, [endpoint, query]);\r\n\r\n\t// if (loading) return <p>Loading...</p>;\r\n\t// if (error) return <p>Error: {error.message}</p>;\r\n\r\n\t// return (\r\n\t// \t<div>\r\n\t// \t\t<h1>Fetched Data</h1>\r\n\t// \t\t<ul>\r\n\t// \t\t\t{data.map((item) => (\r\n\t// \t\t\t\t<li key={item.id}>\r\n\t// \t\t\t\t\t{item.name} {item.id-1}\r\n\t// \t\t\t\t\t<img className=\"w-60\" src={item.image} alt={item.name} />\r\n\t// \t\t\t\t</li>\r\n\t// \t\t\t))}\r\n\t// \t\t</ul>\r\n\t// \t</div>\r\n\t// );\r\n};\r\n\r\nexport default Recipes;\r\n\r\n// chicken beef vegetarian pasta soup sweet "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CD,SAAS,CAAC,MAAM;IACb;IACAY,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,GAAG,GAAGV,KAAK,GACb,yBAAyBD,QAAQ,aAAaC,KAAK,EAAE,GACrD,yBAAyBD,QAAQ,EAAE;QAEvC,MAAMY,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;QAC5B,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAC,gCAAgCH,GAAG,CAACI,UAAU,EAAE,CAAC;QACnE;QACA,MAAMC,MAAM,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAEnCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAACI,OAAO,CAACC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAAC,CAAC;QAC7ClB,OAAO,CAACY,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRlB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,QAAQ,EAAEC,KAAK,CAAC,CAAC;EAEtB,oBACGH,OAAA;IAAA4B,QAAA,GACGpB,OAAO,iBAAIR,OAAA;MAAA4B,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5BtB,KAAK,iBAAIV,OAAA;MAAA4B,QAAA,GAAG,SAAO,EAAClB,KAAK;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9B1B,IAAI,iBACHN,OAAA;MAAA4B,QAAA,eAEE5B,OAAA;QAAA4B,QAAA,EAAMtB,IAAI,CAACiB;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;EAET;EACA;EACC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CAAC;AAAC3B,EAAA,CAzFIJ,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AA2Fb,eAAeA,OAAO;;AAEtB;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}