{"ast":null,"code":"var _jsxFileName = \"/Users/addod/BlessedBites/blessedbites/src/recipes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recipes = ({\n  endpoint,\n  onDataFetched\n}) => {\n  _s();\n  // const url = query \n  // \t\t\t? `https://dummyjson.com/${endpoint}/search?q=${query}`\n  // \t\t\t: `https://dummyjson.com/${endpoint}`;\n\n  useEffect(() => {\n    fetchData(endpoint);\n  }, [endpoint]);\n  const fetchData = async url => {\n    try {\n      const res = await fetch(url);\n      const result = await res.json();\n      onDataFetched(result);\n    } catch (err) {\n      console.error('Error fetching data: ', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"data passed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(Recipes, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Recipes;\nexport default Recipes;\n\n// useEffect(() => {\n// \tsetLoading(true);\n//   setError(null);\n\n// \tconst url = query \n//         ? `https://dummyjson.com/${endpoint}/search?q=${query}`\n//         : `https://dummyjson.com/${endpoint}`;\n\n// \t// Fetch data when component mounts\n// \tfetch(url) \n// \t\t.then((res) => {\n// \t\t\tif (!res.ok) {\n// \t\t\t\tthrow new Error('Network response was not ok');\n// \t\t\t}\n// \t\t\treturn res.json();\n// \t\t})\n// \t\t.then((data) => {\n// \t\t\tconsole.log(\n// \t\t\t\t// data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\n// \t\t\t\tdata.recipes\n// \t\t\t);\n// \t\t\tsetData(data.recipes)// setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\n// \t\t\tsetLoading(false); // Set loading to false after data is fetched\n// \t\t})\n// \t\t.catch((error) => {\n// \t\t\tsetError(error); // Set error state if there’s an error\n// \t\t\tsetLoading(false);\n// \t\t});\n// }, [endpoint, query]);\n\n// if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error: {error.message}</p>;\n\n// return (\n// \t<div>\n// \t\t<h1>Fetched Data</h1>\n// \t\t<ul>\n// \t\t\t{data.map((item) => (\n// \t\t\t\t<li key={item.id}>\n// \t\t\t\t\t{item.name} {item.id-1}\n// \t\t\t\t\t<img className=\"w-60\" src={item.image} alt={item.name} />\n// \t\t\t\t</li>\n// \t\t\t))}\n// \t\t</ul>\n// \t</div>\n// );\nvar _c;\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Recipes","endpoint","onDataFetched","_s","fetchData","url","res","fetch","result","json","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/addod/BlessedBites/blessedbites/src/recipes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Recipes = ({ endpoint, onDataFetched }) => {\r\n\t// const url = query \r\n\t// \t\t\t? `https://dummyjson.com/${endpoint}/search?q=${query}`\r\n\t// \t\t\t: `https://dummyjson.com/${endpoint}`;\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchData(endpoint);\r\n\t}, [endpoint]);\r\n\r\n\tconst fetchData = async (url) => {\r\n\t\ttry {\r\n\t\t\tconst res = await fetch(url);\r\n\t\t\tconst result = await res.json();\r\n\t\t\tonDataFetched(result)\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error('Error fetching data: ', err);\r\n\t\t}\r\n\t}\r\n\r\n\treturn <div>data passed</div>\r\n};\r\n\r\nexport default Recipes;\r\n\r\n// useEffect(() => {\r\n\t// \tsetLoading(true);\r\n  //   setError(null);\r\n\r\n\t// \tconst url = query \r\n  //         ? `https://dummyjson.com/${endpoint}/search?q=${query}`\r\n  //         : `https://dummyjson.com/${endpoint}`;\r\n\r\n\t// \t// Fetch data when component mounts\r\n\t// \tfetch(url) \r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tif (!res.ok) {\r\n\t// \t\t\t\tthrow new Error('Network response was not ok');\r\n\t// \t\t\t}\r\n\t// \t\t\treturn res.json();\r\n\t// \t\t})\r\n\t// \t\t.then((data) => {\r\n\t// \t\t\tconsole.log(\r\n\t// \t\t\t\t// data.recipes.filter((recipe) => recipe.mealType.includes('Breakfast'))\r\n\t// \t\t\t\tdata.recipes\r\n\t// \t\t\t);\r\n\t// \t\t\tsetData(data.recipes)// setData(data.recipes.filter(recipe => recipe.id === 10 || recipe.id === 35 || recipe.id === 47)); // Update data state\r\n\t// \t\t\tsetLoading(false); // Set loading to false after data is fetched\r\n\t// \t\t})\r\n\t// \t\t.catch((error) => {\r\n\t// \t\t\tsetError(error); // Set error state if there’s an error\r\n\t// \t\t\tsetLoading(false);\r\n\t// \t\t});\r\n\t// }, [endpoint, query]);\r\n\r\n\t// if (loading) return <p>Loading...</p>;\r\n\t// if (error) return <p>Error: {error.message}</p>;\r\n\r\n\t// return (\r\n\t// \t<div>\r\n\t// \t\t<h1>Fetched Data</h1>\r\n\t// \t\t<ul>\r\n\t// \t\t\t{data.map((item) => (\r\n\t// \t\t\t\t<li key={item.id}>\r\n\t// \t\t\t\t\t{item.name} {item.id-1}\r\n\t// \t\t\t\t\t<img className=\"w-60\" src={item.image} alt={item.name} />\r\n\t// \t\t\t\t</li>\r\n\t// \t\t\t))}\r\n\t// \t\t</ul>\r\n\t// \t</div>\r\n\t// );"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD;EACA;EACA;;EAEAP,SAAS,CAAC,MAAM;IACfQ,SAAS,CAACH,QAAQ,CAAC;EACpB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMG,SAAS,GAAG,MAAOC,GAAG,IAAK;IAChC,IAAI;MACH,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC5B,MAAMG,MAAM,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC/BP,aAAa,CAACM,MAAM,CAAC;IACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACbC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC5C;EACD,CAAC;EAED,oBAAOX,OAAA;IAAAc,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC9B,CAAC;AAACd,EAAA,CApBIH,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AAsBb,eAAeA,OAAO;;AAEtB;AACC;AACC;;AAED;AACC;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}